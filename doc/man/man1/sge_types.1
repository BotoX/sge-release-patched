'\" t
.\"___INFO__MARK_BEGIN__
.\"
.\" Copyright: 2004-2007 by Sun Microsystems, Inc.
.\"
.\"___INFO__MARK_END__
.\"
.\" $RCSfile: sge_types.1,v $     Last Update: $Date: 2007-02-13 17:48:27 $     Revision: $Revision: 1.14 $
.\"
.\"
.\" Some handy macro definitions [from Tom Christensen's man(1) manual page].
.\"
.de SB		\" small and bold
.if !"\\$1"" \\s-2\\fB\&\\$1\\s0\\fR\\$2 \\$3 \\$4 \\$5
..
.\"
.de T		\" switch to typewriter font
.ft CW		\" probably want CW if you don't have TA font
..
.\"
.de TY		\" put $1 in typewriter font
.if t .T
.if n ``\c
\\$1\c
.if t .ft P
.if n \&''\c
\\$2
..
.\"
.de M		\" man page reference
\\fI\\$1\\fR\\|(\\$2)\\$3
..
.TH xxQS_NAME_Sxx_TYPES 1 "$Date: 2007-02-13 17:48:27 $" "xxRELxx" "xxQS_NAMExx User Commands"
.\"
.SH NAME
sge_types - xxQS_NAMExx type descriptions 
.\"
.SH DESCRIPTION
.\"
The xxQS_NAMExx
user interface consists of several programs and files. Some command-line 
switches and several file attributes are types. The syntax for these
types is explained in this page.
.PP
.\"
.SH "TYPES"
The syntax of xxQS_NAMExx types in alphabetic order:
.\"
.\" expression        => a regular boolean expression
.\" host              => wc_host without expression
.\" hostgroup         => wc_hostgroup without expression
.\" pattern           => a pattern definition
.\" qdomain           => wc_qdomain without expression
.\" qinstance         => wc_qinstance without expression
.\" queue             => wc_queue without expression
.\" range             := n[-m[:s]][,n[-m[:s]],...]
.\" user              => wc_user without pattern
.\" user_list         := user[,user,...]
.\" wc_host           := wildcard expression matching a host
.\" wc_hostgroup      := wildcard expression matching a hostgroup
.\" wc_job            := job-id|job-name|pattern
.\" wc_job_range      := wc_job[ -t range]
.\" wc_job_list       := wc_job[,wc_job,...]
.\" wc_job_range_list := wc_job_range[,wc_job_range,...]
.\" wc_qdomain        := wc_cqueue@wc_hostgroup
.\" wc_qinstance      := wc_cqueue@wc_host
.\" wc_queue          := wc_cqueue|wc_qdomain|wc_qinstance
.\" wc_queue_list     := wc_queue[,wc_queue,...]
.\" wc_user           := user_name|pattern
.\" wc_user_list      := wc_user[,wc_user,...]
.\" wc_project        := project|pattern
.\" wc_pe_name        := pe_name|pattern
.\"
.SS "\fBexpression\fP"
A wildcard expression is a regular boolean expression that consists of
one or more \fIpattern\fPs joined by boolean operators. 
When a wildcard expression is used, the following definition applies:
.PP
.\"
.nf
.ta \w'XXXXXXXX'u
expression	= ["!"] ["("] valExp [")"] [ AND_OR expression ]*
valExp	= pattern | expression
AND_OR	= "&" | "|"
.fi
.PP
where:
.PP
.\"
.nf
.ta \w'XXXXXXXXXX'u
"!"	not operator -- negate the following pattern or expression 
"&"	and operator -- logically and with the following expression
"|"	or operator -- logically or with the following expression
"("	open bracket -- begin an inner expression.
")"	close bracket -- end an inner expression. 
"pattern"	see the \fIpattern\fP definition thats follow
.fi
.PP
The expression itself should be put inside quotes ('"') to ensure, that
clients receive the complete expression.
.PP
.\"
.ta
e.g.
.RS
.nf
.ta \w'XXXXXXXXXXXXXXXXXX'u
"(lx*|sol*)&*64*" any string beginning with either "lx" or
                  "sol" and containing "64"
"rh_3*&!rh_3.1"   any string beginning with "rh_3", except
                  "rh_3.1"
.fi
.\"
.SS "\fBpattern\fP"
When patterns are used the following definitions apply:
.PP
.nf
.ta \w'XXXXXXXX'u
"*"	matches any character and any number of characters 
	(between 0 and inv).
"?"	matches any character. It cannot be no character
"."	is the character ".". It has no other meaning
"\\"	escape character. "\\\\" = "\\", "\\*" = "*", "\\?" = "?"
"[...]"	specifies an array or a range of allowed 
	characters for one character at a specific position.
        Character ranges may be specified using the a-z notation.
        The caret symbol (^) is \fBnot\fP interpreted as a logical
        not; it is intrepreted literally.

For more details please see 
.M fnmatch 5
.\"

.fi
.PP
The pattern itself should be put inside quotes ('"') to ensure, that
clients receive the complete pattern.
.PP
.SS "\fBrange\fP"
The task range specifier has the form 
.sp 1
n[-m[:s]][,n[-m[:s]], ...] 
or 
n[-m[:s]][ n[-m[:s]] ...] 
.sp 1
and thus consists of a comma or blank separated
list of range specifiers n[-m[:s]]. The ranges are concatenated to the
complete task id range. Each range may be a single number, a simple
range of the form n-m or a range with a step size.
.PP
.SS "\fBwc_host\fP"
A wildcard host specification (\fIwc_host\fP) is a 
wildcard expression which might match one or more hosts used in the cluster.
The first character of that string never begins with an at-character ('@'), even
if the expression begins with a wildcard character.
.PP
.\"
.nf
.ta
e.g.
.RS
.ta \w'XXXXXXXXXXXXX'u
*	all hosts
a*	all host beginning with an 'a'	
.fi
.\"
.SS "\fBwc_hostgroup\fP"
A wildcard hostgroup specification (\fIwc_hostgroup\fP) is a 
wildcard expression which might match one or more hostgroups.
The first character of that string is always an at-character ('@').
.PP
More information concerning hostgroups can be found in
.M hostgroup 5
.PP
.nf
.ta
e.g.
.RS
.ta \w'XXXXXXXXXXXXX'u
@*	all hostgroups in the cluster
@solaris	the @solaris hostgroup
.fi
.\"
.SS "\fBwc_job\fP"
The wildcard job specification is a placeholder for job ids, job names 
include job name pattern. A job id always references one
job, while the names and pattern might reference multiple jobs.
.sp 1
wc_job := job-id | job-name | pattern
.PP
.SS "\fBwc_job_range\fP"
The wildcard job range specification allows to reference specific array
tasks for one or multipe jobs. The job is referenced via wc_job and in
addition gets a range specifier for the array tasks.
.sp 1
wc_job_range := wc_job [ -t range]
.PP
.SS "\fBwc_job_list\fP"
The wildcard job list specification allows to reference multiple jobs 
with one command.
.PP
wc_job_list := wc_job [ , wc_job , ...]
.PP
.SS "\fBwc_job_range_list\fP"
The wildcard job range list (\fIwc_job_range_list\fP) is specified by 
one of the following forms:
.sp 1
.ta 0.5i
    \fIwc_job[ -t range][{, }wc_job[ -t range]{, }...]\fP
.ta 0.0i
.sp 1
If present, the \fItask_range\fP restricts the effect of the \fIqmod\fP
operation to the array job task range specified as suffix to the job id
(see the \fB\-t\fP option to
.M qsub 1
for further details on array jobs).
.PP
.SS "\fBwc_qdomain\fP"
\fIwc_qdomain\fP := \fIwc_cqueue\fP "@" \fIwc_hostgroup\fP
.PP
A wildcard expression queue domain specification (\fIwc_qdomain\fP) starts with a wildcard
expression cluster queue name (\fIwc_cqueue\fP) followed by an at-character '@' 
and a wildcard expression hostgroup specification (\fIwc_hostgroup\fP).
.PP
\fIwc_qdomain\fP are used to address a group of queue instances.
All queue instances residing on a hosts which is part of matching hostgroups
will be addressed. Please note, that \fIwc_hostgroup\fP always begins with
an at-character.
.PP
.nf
.ta
e.g.
.RS
.ta \w'XXXXXXXXXXXXX'u
*@@*	all queue instances whose underlaying
	host is part of at least one hostgroup
a*@@e*	all queue instances begins with a whose underlaying
	host is part of at least one hostgroup begin with e
*@@solaris	all queue instances on hosts part of
	the @solaris hostgroup
.fi
.\"
.SS "\fBwc_cqueue\fP"
A wildcard expression cluster queue specification (\fIwc_cqueue\fP) is a 
wildcard expression which might match one or more cluster queues used in the cluster.
That string never contains an at-character ('@'), even if the expression begins with a 
wildcard character.
.PP
.\"
.nf
.ta
e.g.
.RS
.ta \w'XXXXXXXXXXXXX'u
*	all cluster queues
a*	all cluster queues beginning with an 'a'
a*&!adam	all cluster queues beginning with an 'a',but not adam
.fi
.\"
.SS "\fBwc_qinstance\fP"
\fIwc_qinstance\fP := \fIwc_cqueue\fP "@" \fIwc_host\fP
.PP
A wildcard expression queue instance specification (\fIwc_qinstance\fP) starts 
with a wildcard expression cluster queue name (\fIwc_cqueue\fP) followed by an 
at-character '@' and a wildcard expression hostname (\fIwc_host\fP).
.PP
\fIwc_qinstance\fP expressions are used to address a group
of queue instances whose underlaying hostname matches the given expression.
Please note that the first character of \fIwc_host\fP does never match 
the at-character '@'. 
.PP
.nf
.ta
e.g.
.RS
.ta \w'XXXXXXXXXXXXX'u
*@*	all queue instances in the cluster
*@b*	all queue instances whose 
	hostname begins with a 'b'
*@b*|c*	all queue instances whose 
	hostname begins with a 'b' or 'c'
.fi
.\"
.SS "\fBwc_queue\fP"
\fIwc_queue\fP := \fIwc_cqueue\fP | \fIwc_qdomain\fP | \fIwc_qinstance\fP 
.PP
A wildcard queue expression (\fIwc_queue\fP) might either be a wildcard expression 
cluster queue specification (\fIwc_cqueue\fP) or a wildcard expression queue domain
specification (\fIwc_qdomain\fP) or a wildcard expression queue instance specification
(\fIwc_qinstance\fP).
.PP
.nf
.ta 
e.g.
.RS
.ta \w'XXXXXXXXXXXXXXXXX'u
big_*1	cluster queues which begin with 
	"big_" and end with "1" 
big_*&!*1	cluster queues which begin with 
	"big_" ,but does not end with "1" 
*@fangorn	all qinstances residing on host 
	fangorn
.fi
.\"
.SS "\fBwc_queue_list\fP"
\fIwc_queue_list\fP := \fIwc_queue\fP ["," \fIwc_queue\fP "," ...]
.PP
Comma separated list of wc_queue elements.
.PP
e.g. 
.RS
big, medium_*@@sol*, *@fangorn.sun.com
.PP
.SS "\fBwc_user\fP"
A wildcard user name pattern is either a wildcard user name specification
or a full user name.
.PP
wc_user := user_name | pattern
.PP
.SS "\fbwc_user_list\fP"
A list of user names.
.PP
wc_user_list := wc_user [ , wc_user , ...]
.PP
.SS "\fBwc_project\fP"
A wildcard project name pattern is either a wildcard project name specification
or a full project name.
.PP
wc_project := project | pattern
.PP
.SS "\fBwc_pe_name\fP"
A wildcard parallel environment name pattern is either a wildcard pe name specification
or a full pe name.
.PP
wc_pe_name := pe_name | pattern
.PP
.\"
.SH SEE ALSO
.M qacct 1 ,
.M qconf 1 ,
.M qquota 1
.\"
.SH COPYRIGHT
Copyright: 2004-2007 by Sun Microsystems, Inc.
