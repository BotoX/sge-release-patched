# Properties file which configures the operation of the JDK
# logging facility.

# The system will look for this config file, first using
# a System property specified at startup:
#
# >java -Djava.util.logging.config.file=myLoggingConfigFilePath
#
# If this property is not specified, then the config file is
# retrieved from its default location at:
#
# JDK_HOME/jre/lib/logging.properties

# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
handlers=java.util.logging.ConsoleHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=INFO

#com.sun.grid.jgdi.JGDI.level=OFF
#com.sun.grid.jgdi.JGDI.qstat.level=FINE
#com.sun.grid.jgdi.monitoring.level=FINE
#com.sun.grid.jgdi.util.JGDIShell.level=FINE
#com.sun.grid.jgdi.JGDI.level=ALL
#com.sun.grid.jgdi.level=FINER

#com.sun.grid.jgdi.configuration.ClusterQueue.level=ALL
#com.sun.grid.jgdi.configuration.ConfigurationTestCase.level=FINE
# --- ConsoleHandler ---
# Override of global logging level
#java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter= com.sun.grid.jgdi.util.shell.ShellFormatter


#java.util.logging.ConsoleHandler.formatter= com.sun.grid.jgdi.util.SGEFormatter

# Possible columns:
#
#   time    timestamp of the log message
#   host    hostname of the log message
#   name    name of the logger
#   thread  id of the thread
#   level   log level (short form)
#   source  class and method name
#   level_long log_level long form
#
com.sun.grid.jgdi.util.SGEFormatter.columns = time thread source level message

#
#  Print the stacktrace of the log record
#
com.sun.grid.jgdi.util.SGEFormatter.withStacktrace=true

#
#  Delimiter between columns
#
com.sun.grid.jgdi.util.SGEFormatter.delimiter = |


