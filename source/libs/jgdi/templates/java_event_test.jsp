/**
 * Copyright 2003-2004 Sun Microsystems, Inc. All rights reserved.
 * Use is subject to license terms.
 * -----------------------------------------------------------------------------
 *  Generated from java_event_test.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  final com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  final com.sun.grid.cull.CullObject cullObj = (com.sun.grid.cull.CullObject)params.get("cullObj");  
  
  
  class TestGenerator {
     
     private com.sun.grid.cull.CullObject cullObj;
     
     public TestGenerator(com.sun.grid.cull.CullObject cullObj) {
        this.cullObj = cullObj;   
     }
     
     private void genAddDelTest() {
        String name = cullObj.getIdlName();
%>
   public void test<%=name%>Events() throws Exception {
<%
     if(cullObj.getType() == cullObj.TYPE_PRIMITIVE) {
           
        if(cullObj.getName().equals("SGE_HOST")) {
%>
      String testObj = TestValueFactory.getNextHostname();
<%        
        } else {
%>
      String testObj = "blubber";
<%
        }
     } else {
%>         
      Object [] testValues = TestValueFactory.getTestValues(<%=name%>.class); 

      assertTrue("No test values for <%=name%>", testValues.length > 0 );
      
      <%=name%> testObj = (<%=name%>)testValues[0];
<%
     }
%>

      WaitForEventThread waitThread = new WaitForEventThread(testObj);

      int flushInterval = 1; // in seconds
      long timeout = flushInterval * 1000 * 3;
      try {

         evc.addEventListener(waitThread);

         evc.subscribeAdd<%=name%>(true);
         evc.setAdd<%=name%>Flush(true, flushInterval);
         
         evc.subscribeDel<%=name%>(true);
         evc.setDel<%=name%>Flush(true, flushInterval);
<% 
   if (cullObj.hasModifyOperation()) {
%>         
         evc.subscribeMod<%=name%>(true);            
         evc.setMod<%=name%>Flush(true, flushInterval);
<%
   }
%>         

         evc.commit();
         // evc.start();

         waitThread.start();

         Thread.yield();

         jgdi.add<%=name%>(testObj);

         logger.fine(testObj.toString() + " added");
         assertTrue("<%=name%>: Did not get the add event", waitThread.waitForAddEvent(timeout) );

<% 
   if (cullObj.hasModifyOperation()) {
%>         
         // TODO modify the test object
<%
     if(name.equals("Calendar")) {
%>
         testObj.setYearCalendar("01.01.2007");
<%         
     } else if (name.equals("User")) {
%>
         testObj.setOticket(10);
<%         
     } else if (name.equals("ParallelEnvironment")) {
%>
         testObj.setSlots(10);
<%         
     }
%>
         jgdi.update<%=name%>(testObj);
         logger.fine(testObj.toString() + " modified");
         assertTrue("<%=name%>: Did not get the mod event", waitThread.waitForModEvent(timeout) );
<%
   } // end of cullObj.hasModifyOperation()
%>         

         jgdi.delete<%=name%>(testObj);
         logger.fine(testObj.toString() + " deleted");
         testObj = null;

         assertTrue("<%=name%>: Did not get the del event", waitThread.waitForDelEvent(timeout) );

      } finally {
         waitThread.interrupt();
         evc.subscribeAdd<%=name%>(false);
         evc.subscribeDel<%=name%>(false);
<% 
   if (cullObj.hasModifyOperation()) {
%>         
         evc.subscribeMod<%=name%>(false);            
<%
   }
%>         
         evc.commit();
         
         if (testObj != null) {
            try {
               jgdi.delete<%=name%>(testObj);
            } catch(Exception e) {
               // ignore
            }
         }
      }
   }
<%
     } // genAddDelTest
     
     private void genStaticTest() {
        String name = cullObj.getIdlName();
        
%>
   public void test<%=name%>() throws Exception {

      // static test for <%=name%> not implemented
      <%=name%> testObj = jgdi.get<%=name%>();
      
<%
         if(name.equals("SchedConf")) {         
%>
         int orgValue = testObj.getMaxujobs();
<%
         }
%>        
  
    
      WaitForEventThread waitThread = new WaitForEventThread(testObj);
    
      int flushInterval = 1; // in seconds
      long timeout = flushInterval * 1000 * 3;
      try {

         evc.addEventListener(waitThread);

         evc.subscribeMod<%=name%>(true);
         evc.setMod<%=name%>Flush(true, flushInterval);
         
         evc.commit();
         waitThread.start();
         Thread.yield();
<%
         if(name.equals("SchedConf")) {         
%>
         testObj.setMaxujobs(orgValue+1);
<%
         }
%>  

         jgdi.update<%=name%>(testObj);
         
         assertTrue("<%=name%>: Did not get the mod event", waitThread.waitForModEvent(timeout) );
         
      } finally {
         waitThread.interrupt();
         evc.subscribeMod<%=name%>(false);
         evc.commit();

         testObj = jgdi.get<%=name%>();
<%
         if(name.equals("SchedConf")) {         
%>
         testObj.setMaxujobs(orgValue);
<%
         }
%>  
         jgdi.update<%=name%>(testObj);
      }
         
   }
<%        
        
     } // end of genStaticTest
     
  } // end of class TestGenerator
%>
package com.sun.grid.jgdi.event;


import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.configuration.reflect.*;
import junit.framework.*;
import com.sun.grid.jgdi.BaseTestCase;
import java.util.Hashtable;
import com.sun.grid.jgdi.EventClient;
import com.sun.grid.jgdi.JGDIFactory;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import java.util.Iterator;
import com.sun.grid.jgdi.TestValueFactory;

public class <%=cullObj.getIdlName()%>EventTestCase extends BaseTestCase {

   private JGDI jgdi;
   private JGDI jgdi_evc;
   private EventClient evc;
   
   public <%=cullObj.getIdlName()%>EventTestCase(String name) {
      super(name);
   }
   
   public static Test suite() {
      TestSuite suite = new TestSuite(<%=cullObj.getIdlName()%>EventTestCase.class);
      return suite;
   }
   
   protected void setUp() throws Exception {
      logger.fine("Loading jgdi");
      // System.loadLibrary( "jgdi" );
      
      jgdi = createJGDI();
      jgdi_evc = createJGDI();
      evc = JGDIFactory.createEventClient(jgdi_evc, 0);
      evc.start();
      super.setUp();
      logger.fine("SetUp done");
   }
   
   protected void tearDown() throws Exception {
      try {
        evc.close();
      } finally {
         jgdi.close();
         jgdi_evc.close();
      }
   }
   

<%
   TestGenerator gen = new  TestGenerator(cullObj);

   if( !(cullObj.hasAddOperation() &&
       cullObj.hasDeleteOperation()) ) {
      if (!cullObj.getIdlName().equals("JobSchedulingInfo")) {
         gen.genStaticTest();
      }
   } else {
      gen.genAddDelTest();
   }
%>

}