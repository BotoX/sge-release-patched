/**
 * Copyright 2003-2004 Sun Microsystems, Inc. All rights reserved.
 * Use is subject to license terms.
 * -----------------------------------------------------------------------------
 *  Generated from java_rmi_jgdi_cache.template
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  final com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  class JGDIRMICacheGenerator extends com.sun.grid.cull.AbstractGDIGenerator {
     
     public JGDIRMICacheGenerator(com.sun.grid.cull.CullObject cullObject) {
        super(cullObject.getIdlName(),  jh.getClassName(cullObject), cullObject);
        addPrimaryKeys(cullObject, jh);
     }
     
     public void genImport() {
        if(!(cullObject.getType() == cullObject.TYPE_PRIMITIVE || 
             cullObject.getType() == cullObject.TYPE_MAPPED)) {
%>import com.sun.grid.jgdi.configuration.<%=classname%>;        
<%        
        }
     } // end of genImport
     
     public void genUpdateMethod() {
%>

   /**
    *  Update <%=getPrimaryKeyCount() == 0 ? "the" : "a"%> <%=name%> object
    *
    *  @param obj  the <%=name%> object with the new values
    *  @throws RemoteException on any error
    */
   public void update<%=name%>(<%=classname%> obj) throws RemoteException {
      try {
         jgdi.update<%=name%>(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
<%
      if (cullObject.hasGetListOperation()) {
%>     
       finally {      
         <%=name%>Cache = null;
       }
<%
      }
%>      
   }
<%
    } // end of genUpdateMethod
     
    public void genGetMethod() {
%>      
   private <%=classname%> <%=name%>Cache = null;
   /**
    *   Get the <code><%=name%></code> object.
    *   @return the <code><%=name%></code> object
    *   @throws RemoteException on any error
    */
   public <%=classname%> get<%=name%>() throws RemoteException {
   
      if ( jgdi == null ) {
         return null;
      }
      if (<%=name%>Cache == null ) {
         try {
             <%=name%>Cache = jgdi.get<%=name%>();
         } catch( RemoteException re ) {
            handleError(re);
            return null;
         }
      }
      return <%=name%>Cache;
   }
   
<% } // end of genGetMethod
    
   public void genGetListMethod() {
%>
   private List <%=name%>Cache = null;
   /**
    *   Get all <code><%=name%></code> objects.
    *
    *   @return a list of <code><%=name%></code> objects
    *   @throws RemoteException on any error
    */
   public List get<%=name%>List() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (<%=name%>Cache == null ) {
         try {
             <%=name%>Cache = jgdi.get<%=name%>List();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return <%=name%>Cache;
   }
<%
   } // end of genGetListMethod
   
   public void genAddMethod() {
%>
   /**
    *   Add a new <code><%=name%></code> object.
    *
    *   @param obj the new <code><%=name%></code> object
    *   @throws RemoteException on any error
    */
   public void add<%=name%>(<%=classname%> obj) throws RemoteException {
     try {
        jgdi.add<%=name%>(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     } <%
       
      if (cullObject.hasGetListOperation()) {
%> finally {      
         <%=name%>Cache = null;
       }
<%
      }
%>      
   }
   
<%
   } // end of genAddMethod
   
   public void genDeleteMethod() {
%>  
   
   /**
    *   Add a delete <code><%=name%></code> object.
    *
    *   @param obj the <code><%=name%></code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void delete<%=name%>(<%=classname%> obj) throws RemoteException {
     try {
        jgdi.delete<%=name%>(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     } <%
       
      if (cullObject.hasGetListOperation()) {
%> finally {      
         <%=name%>Cache = null;
       }
<%
      }
%>
   }
<%
  } // end of genDeleteMethod
   
  public void genGetByPrimaryKeyMethod() {
%>  
   /**
    *   Get a a <code><%=name%></code> object by its primary key
    *
<%   java.util.Iterator iter = primaryKeys.keySet().iterator();
   boolean first = true;
   while(iter.hasNext()) {
      String pkName = (String)iter.next();
%>    *   @param <%=pkName%>  the <%=pkName%> of the <code><%=name%></code> object <%      
   }
%>      
    *   @return the <code><%=name%></code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public <%=classname%> get<%=name%>(<%
   
   iter = primaryKeys.keySet().iterator();
   first = true;
   while(iter.hasNext()) {
      String pkName = (String)iter.next();
      String pkType = (String)primaryKeys.get(pkName);
      if(first) {
         first = false;
      } else {
         %>, <%
      }
      %> <%=pkType%> <%=pkName%><%
   }
   %>) throws RemoteException {
   
      try {
          return jgdi.get<%=name%>(<%
   iter = primaryKeys.keySet().iterator();
   first = true;
   while(iter.hasNext()) {
      String pkName = (String)iter.next();
      if(first) {
         first = false;
      } else {
         %>, <%
      }
      %><%=pkName%><%
   }             
              %>);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }
<%        
     } // end of genGetByPrimaryKeyMethod
  } // end of class JGDIRMICacheGenerator
  
  // ---------------------------------------------------------------------------
  // Build Generator instances
  // ---------------------------------------------------------------------------

  java.util.Iterator iter = cullDef.getObjectNames().iterator();
  java.util.List generators = new java.util.ArrayList();
  while(iter.hasNext()) {
    String name = (String)iter.next();

    com.sun.grid.cull.CullObject cullObj = cullDef.getCullObject(name);
    generators.add(new JGDIRMICacheGenerator(cullObj));
  }
%>
package com.sun.grid.jgdi.rmi;


import java.rmi.RemoteException; 
import java.rmi.Remote;
import java.util.List;
import java.util.Collections;
import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.JGDIException;

<% // Import all cull object names;
    iter = generators.iterator();

    while( iter.hasNext() ) {
       JGDIRMICacheGenerator gen = (JGDIRMICacheGenerator)iter.next();
       gen.genImport();
    } // end of while %>
    
    
/**
 *  This class implements a cache for the {@link JGDIRemote} interface.
 */
public class JGDIRemoteCache extends JGDIRemoteCacheBase implements JGDIRemote {

   /** Creates a new instance of JGDIRemoteCache */
   public JGDIRemoteCache() {
   }
   
   /**
    *  Create a new instanceof of JGDIRemoteCache
    *  @param jgdi  the jgdi remote service
    */
   public JGDIRemoteCache(JGDIRemote jgdi) {
      super(jgdi);
   }
   
<% iter = generators.iterator();
   while( iter.hasNext() ) {
       JGDIRMICacheGenerator gen = (JGDIRMICacheGenerator)iter.next();
       gen.genMethods();
   } // end of while 
%>
}
