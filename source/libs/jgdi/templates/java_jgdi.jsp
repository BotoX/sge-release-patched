/**
 * Copyright 2003-2004 Sun Microsystems, Inc. All rights reserved.
 * Use is subject to license terms.
 * -----------------------------------------------------------------------------
 *  Generated from java_jgdi.template
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  final com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  
  final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("cullconv");
  
  class JGDIGenerator extends com.sun.grid.cull.AbstractGDIGenerator {
     
     public JGDIGenerator(com.sun.grid.cull.CullObject cullObj) {
        
        super(cullObj.getIdlName(),  jh.getClassName(cullObj), cullObj);
        addPrimaryKeys(cullObj, jh);
     }
     
     public void genImport() {
        if(!(cullObject.getType() == cullObject.TYPE_PRIMITIVE || 
             cullObject.getType() == cullObject.TYPE_MAPPED ) ) {
%>        
import com.sun.grid.jgdi.configuration.<%=classname%>;<%        
        }
     }

public void genUpdateMethod() { %>
   /**
    *   Update a <code><%=name%></code> object.
    *   @param obj   the <code><%=name%></code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void update<%=name%>(<%=classname%> obj) throws JGDIException;
<%        
    } // end of getUpdateMethod
    
    public void genGetMethod() {
%>
   /**
    *   Get the <code><%=name%></code> object.
    *   @return the <code><%=classname%></code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public <%=classname%> get<%=name%>() throws JGDIException;
<%   
    } // end of genGetMethod
    
    public void genGetListMethod() {
%>
   /**
    *   Get the list of all defined <code><%=name%></code> objects.
    *   @return list of <code><%=name%></code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public java.util.List get<%=name%>List() throws JGDIException;
<%
    } // end of genGetListMethod
    
    public void genAddMethod() {
%>    
   
   /**
    *   Add a new <code><%=name%></code> object.
    *   @param  obj the new <code><%=name%></code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void add<%=name%>(<%=classname%> obj) throws JGDIException;
<%
    } // end of genAddMethod
    
    public void genDeleteMethod() {
%>
   /**
    *   Delete a <code><%=name%></code> object.
    *   @param obj  <code><%=name%></code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void delete<%=name%>(<%=classname%> obj) throws JGDIException;
<%
    } // end of genDeleteMethod

    public void genGetByPrimaryKeyMethod() {
%> 
   /**
    *  Get a <%=name%> by its primary key
    *
    *  @return the <%=name%>
<%
{
    java.util.Iterator pkIter = primaryKeys.keySet().iterator();
    while(pkIter.hasNext()) {
       String pkName = (String)pkIter.next();
       String pkType = (String)primaryKeys.get(pkName);
%>    *  @param <%=pkName%>   the <%=pkName%> of the <code><%=name%></code> object
<%
    }    
}
%>    *  @return the found <code><%=name%></code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public <%=classname%> get<%=name%>(<%
    boolean first = true;  
    java.util.Iterator pkIter = primaryKeys.keySet().iterator();
    while(pkIter.hasNext()) {
       String pkName = (String)pkIter.next();
       String pkType = (String)primaryKeys.get(pkName);
       
       if(first) {
         first = false;
       } else {
            %> , <%           
       } 
       %> <%=pkType%> <%=pkName%> <%
    } // end of while  
    %>) throws JGDIException;
<%     
     } // end of genGetByPrimaryKeyMethod
  } // end of class JGDIGenerator
  
  
  // --------------------------------------------------------------------------
  // Build all generator instances
  // --------------------------------------------------------------------------
  java.util.Iterator iter = cullDef.getObjectNames().iterator();
  com.sun.grid.cull.CullObject cullObj = null;
  String name = null;
  java.util.ArrayList generators = new java.util.ArrayList();
  
  while( iter.hasNext() ) {
      name = (String)iter.next();
      cullObj = cullDef.getCullObject(name); 
      JGDIGenerator gen = null;

      logger.fine("JGDIGenerator->handle " + cullObj.getName() + "(" + cullObj.getOperationString() +")");
      generators.add(new JGDIGenerator(cullObj));
      
  } // end of while iter.hasNext()
  
%>

package com.sun.grid.jgdi;

import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.monitoring.QHostOptions;
import com.sun.grid.jgdi.monitoring.QHostResult;

<% // Import all cull object names;
  iter = generators.iterator();
  while(iter.hasNext()) {
     JGDIGenerator gen = (JGDIGenerator)iter.next();
     gen.genImport();
  }  
%>    
/**
 *  <p>The class <code>JGDI</code> is the central interface for communication with
 *  the N1GE master.</p>
 *
 *  <p>An instanceof of the interface can be obtained via the {@link JGDIFactory}. 
 *  For each <code>JGDI</code> instance the <code>close</code> method has to
 *  called to give the native parts of the implementation a chance to release
 *  the resources.</p>
 *
 *  <p>Example:</p>
 *  <pre>
 *     String url = "bootstrap:///opt/sge@default:1026";
 *     String user = "sge_admin";
 *     String password = "secret";
 *
 *     JGDI jgdi = JGDIFactory.newInstance(url, user, password);
 *     ...
 *     jgdi.close();
 *    
 *  </pre>
 *
 *  <strong>Warning:</strong>  The JGDI interface will not be compatible with future N1&trade; Grid Engine releases. 
 *
 *  @author andre.alefeld@sun.com
 *  @author richard.hierlmeier@sun.com
 *  @version 6.5
 *
 */
public interface JGDI extends JGDIBase {
<%
  iter = generators.iterator();
  while(iter.hasNext()) {
     JGDIGenerator gen = (JGDIGenerator)iter.next();
     gen.genMethods();
  }  
%>    
   
}
