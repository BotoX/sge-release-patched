/**
 * Copyright 2003-2004 Sun Microsystems, Inc. All rights reserved.
 * Use is subject to license terms.
 * -----------------------------------------------------------------------------
 *  Generated from java_event_client.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
%>
package com.sun.grid.jgdi;


import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.event.EventListener;

/**
 *  EventClient interface
 *
 *
 *  <p><b>Example:</b></p>
 *
 *  <pre>
 *
 *
 *  class MyEventListener implements com.sun.grid.jgdi.event.EventListener {
 *
 *      public void eventOccured(com.sun.grid.jgdi.event.Event evt) {
 *         System.out.println(evt);
 *      }
 *  }
 *
 *  int evcId = 0;
 *  EventClient evc = JGDIFactory.createEventClient(jgdi, evcId);
 *
 *  evc.addEventListener(new MyEventListener());
 *
 *  evc.subscribeAll();
 *  evc.subscribeAddCalendar(true);
 *  evc.subscribeModCalendar(true);
 *  evc.commit();
 *
 *  evc.start();
 *
 *  try {
 *    ...
 *  } finally {
 *    evc.close();
 *  }
 *
 *  </pre>
 *  @author  richard.hierlmeier@sun.com 
 *
 *  @todo    beta ??
 *           Add support for trigger events (sgeE_JATASK_*, sgeE_PETASK_*,
 *           sgeE_JOB*, sgeE_NEW_SHARETREE, sgeE_QINSTANCE_*)
 *
 */
public interface EventClient {

   /**
    * Get the id of this event client
    * @return the event client id
    */
   public int getId();
   
   /**
    *  Close this event client
    */
   public void close() throws JGDIException, InterruptedException;
   
   /**
    *  Start the event client
    */
   public void start() throws InterruptedException;
   
   /**
    *  Determine if the event client is running
    *  @return <code>true</code> if the event client is running
    */
   public boolean isRunning();
   
   /**
    *  Subscribe all events for this event client
    *  @throws JGDIException if the subscribtion is failed
    */
   public void subscribeAll() throws JGDIException;
   
   
   /**
    *  Unsubscribe all events for this event client
    *  @throws JGDIException if the unsubscribtion is failed
    */
   public void unsubscribeAll();
   
   /**
    * Add an event listener to this event client
    * @param lis the event listener
    */
   public void addEventListener(EventListener lis);
   
   /**
    * Remove an event listener from this event client
    * @param lis the event listener
    */
   public void removeEventListener(EventListener lis);
   
   /**
    * Commit the subscribtion
    * @throws JGDIException if the commit has failed
    */
   public void commit() throws JGDIException;   

<%
    java.util.Iterator iter = cullDef.getObjectNames().iterator();
    com.sun.grid.cull.CullObject cullObj = null;
    String name = null;

    while( iter.hasNext() ) {
      name = (String)iter.next();
      cullObj = cullDef.getCullObject(name); 
      
      name = cullObj.getIdlName();
      
      if(name == null) {
         throw new IllegalStateException("Have no idl name for " + cullObj.getName());
      }
      
      if(cullObj.hasAddOperation()) {
%>
     /**
      *  Subscribe/Unsubscribe the add <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeAdd<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the add <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setAdd<%=name%>Flush(boolean flush, int interval) throws JGDIException;

     /**
      * Get the flush time of the add <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int getAdd<%=name%>Flush() throws JGDIException;
     
<%
      }
      
      if(cullObj.hasDeleteOperation()) { 
%>
     /**
      *  Subscribe/Unsubscribe the del <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeDel<%=name%>(boolean subscribe) throws JGDIException;

     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setDel<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the del <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  getDel<%=name%>Flush() throws JGDIException;
     
<%     
      }
      if (cullObj.hasGetListOperation()) {
%>         
     /**
      *  Subscribe/Unsubscribe the list <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeList<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the list <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setList<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the list <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int getList<%=name%>Flush() throws JGDIException;
     
<%         
      } // end if hasGetListOperation
      if (cullObj.hasModifyOperation()) {
%>      
     /**
      *  Subscribe/Unsubscribe the modify <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeMod<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setMod<%=name%>Flush(boolean flush, int interval) throws JGDIException;

     /**
      * Get the flush time of the mod <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  getMod<%=name%>Flush() throws JGDIException;
     
<% 
      } // end of hasModifyOperation
   } // end of while 
%>

}
