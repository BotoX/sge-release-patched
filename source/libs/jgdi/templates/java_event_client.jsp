/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_event_client.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
%>
package com.sun.grid.jgdi;

 
import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.event.EventListener;

/** 
 *  EventClient interface
 *
 *
 *  <p><b>Example:</b></p>
 *
 *  <pre>
 *
 *
 *  class MyEventListener implements com.sun.grid.jgdi.event.EventListener {
 *
 *      public void eventOccured(com.sun.grid.jgdi.event.Event evt) {
 *         System.out.println(evt);
 *      }
 *  }
 *
 *  int evcId = 0;
 *  EventClient evc = JGDIFactory.createEventClient(jgdi, evcId);
 *
 *  evc.addEventListener(new MyEventListener());
 *
 *  evc.subscribeAll();
 *  evc.subscribeAddCalendar(true);
 *  evc.subscribeModCalendar(true);
 *  evc.commit();
 *
 *  evc.start();
 *
 *  try {
 *    ...
 *  } finally {
 *    evc.close();
 *  }
 *
 *  </pre>
 *  @author  richard.hierlmeier@sun.com 
 *
 *  @todo    beta ??
 *           Add support for trigger events (sgeE_JATASK_*, sgeE_PETASK_*,
 *           sgeE_JOB*, sgeE_NEW_SHARETREE, sgeE_QINSTANCE_*)
 *
 */
public interface EventClient extends EventClientBase {


<%
    java.util.Iterator iter = cullDef.getObjectNames().iterator();
    com.sun.grid.cull.CullObject cullObj = null;
    String name = null;

    while( iter.hasNext() ) {
      name = (String)iter.next();
      cullObj = cullDef.getCullObject(name); 
      
      name = cullObj.getIdlName();
      
//      System.out.println("name = " + name + ", cullname = " + cullObj.getName() + " " + 
//                         (cullObj.hasAddEvent() ? "A" : "") + 
//                         (cullObj.hasDeleteEvent() ? "D" : "") +
//                         (cullObj.hasGetListEvent() ? "L" : "") +
//                         (cullObj.hasGetEvent() ? "G" : "") +
//                         (cullObj.hasModifyEvent() ? "M" : ""));
      
      if(name == null) {
         throw new IllegalStateException("Have no idl name for " + cullObj.getName());
      }
      if(cullObj.hasAddEvent()) {
%>
     /**
      *  Subscribe/Unsubscribe the add <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeAdd<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the add <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setAdd<%=name%>Flush(boolean flush, int interval) throws JGDIException;

     /**
      * Get the flush time of the add <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int getAdd<%=name%>Flush() throws JGDIException;
     
<%
      }
      
      if(cullObj.hasDeleteEvent()) { 
%>
     /**
      *  Subscribe/Unsubscribe the del <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeDel<%=name%>(boolean subscribe) throws JGDIException;

     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setDel<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the del <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  getDel<%=name%>Flush() throws JGDIException;
     
<%     
      }
      if (cullObj.hasGetListEvent()) {
%>         
     /**
      *  Subscribe/Unsubscribe the list <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeList<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the list <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setList<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the list <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int getList<%=name%>Flush() throws JGDIException;
     
<%         
      } // end if hasGetListOperation
      if (cullObj.hasModifyEvent()) {
%>      
     /**
      *  Subscribe/Unsubscribe the modify <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeMod<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setMod<%=name%>Flush(boolean flush, int interval) throws JGDIException;

     /**
      * Get the flush time of the mod <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  getMod<%=name%>Flush() throws JGDIException;
     
<% 
      } // end of hasModifyOperation
   } // end of while 

   String [] specialEvents = {
       "QmasterGoesDown",
       "SchedulerRun",
       "Shutdown",
       "JobFinish",
       "JobUsage",
       "JobFinalUsage",
       "JobPriorityMod",
       "QueueInstanceSuspend",
       "QueueInstanceUnsuspend"
   };
   
   for(int i = 0; i < specialEvents.length; i++) {

%>
     /**
      *  Subscribe/Unsubscribe the <%=specialEvents[i]%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribe<%=specialEvents[i]%>(boolean subscribe) throws JGDIException;
   
   
     /**
      *  Set the flush time for the <%=specialEvents[i]%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void set<%=specialEvents[i]%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the <%=specialEvents[i]%>  event
      *
      * @return the flush time of the <%=specialEvents[i]%> event in seconds
      */
     public int  getMod<%=specialEvents[i]%>Flush() throws JGDIException;
     
<%
   } // end of for special events
%>
}
