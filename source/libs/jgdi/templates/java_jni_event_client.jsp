/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_jni_event_client.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
%>
package com.sun.grid.jgdi.jni;


import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.JGDI;

/**
 *  EventClient implemention which uses native parts
 *
 */
public class EventClientImpl extends AbstractEventClient implements com.sun.grid.jgdi.EventClient {

   /**
    *   Create a new event client
    *
    *   @param url  JGDI connection url in the form
    *               <code>bootstrap://&lt;SGE_ROOT&gt;@&lt;SGE_CELL&gt;:&lt;SGE_QMASTER_PORT&gt;</code>
    *   @param regId  event client registration id. If this id is 0 the event
    *                 client id will be dynamically assigned
    *   @throws JGDIException If the native intialization of the event client
    *                        fails.
    *                  
    */
   public EventClientImpl(String url, int regId) throws JGDIException {
      super(url, regId);
   }

<%
    com.sun.grid.cull.CullObject cullObj = null;
    for (String name : cullDef.getObjectNames()) {
      cullObj = cullDef.getCullObject(name); 
      name = cullObj.getIdlName();
      if (name == null) {
         throw new IllegalStateException("Have no idl name for " + cullObj.getName());
      }
      if(cullObj.hasAddEvent()) {
%>
     /**
      *  Subscribe/Unsubscribe the add <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribe<%=name%>Add(boolean subscribe) throws JGDIException {
        fairLock.lock();
        try {
           nativeSubscribe<%=name%>Add(subscribe);
        } finally {
            fairLock.unlock();
        }
     }
     
     private native void nativeSubscribe<%=name%>Add(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the add <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void set<%=name%>AddFlush(boolean flush, int interval) throws JGDIException {
        fairLock.lock();
        try {
           nativeSet<%=name%>AddFlush(flush, interval);
        } finally {
            fairLock.unlock();
        }
     }

     private native void nativeSet<%=name%>AddFlush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the add <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int get<%=name%>AddFlush() throws JGDIException {
        fairLock.lock();
        try {
           return nativeGet<%=name%>AddFlush();
        } finally {
            fairLock.unlock();
        }
     }
     
     private native int nativeGet<%=name%>AddFlush() throws JGDIException;
<%
      }
      
      if(cullObj.hasDeleteEvent()) { 
%>
     /**
      *  Subscribe/Unsubscribe the del <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribe<%=name%>Del(boolean subscribe) throws JGDIException {
        fairLock.lock();
        try {
           nativeSubscribe<%=name%>Del(subscribe);
        } finally {
            fairLock.unlock();
        }
     }

     private native void nativeSubscribe<%=name%>Del(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void set<%=name%>DelFlush(boolean flush, int interval) throws JGDIException {
        fairLock.lock();
        try {
           nativeSet<%=name%>DelFlush(flush, interval);
        } finally {
            fairLock.unlock();
        }
     }
     
     private native void nativeSet<%=name%>DelFlush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the del <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  get<%=name%>DelFlush() throws JGDIException {
        fairLock.lock();
        try {
           return nativeGet<%=name%>DelFlush();
        } finally {
            fairLock.unlock();
        }
     }
     
     private native int nativeGet<%=name%>DelFlush() throws JGDIException;
     
<%     
      }
      if (cullObj.hasGetListEvent()) {
%>         
     /**
      *  Subscribe/Unsubscribe the list <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribe<%=name%>List(boolean subscribe) throws JGDIException {
        fairLock.lock();
        try {
           nativeSubscribe<%=name%>List(subscribe);
        } finally {
            fairLock.unlock();
        }
     }
     
     private native void nativeSubscribe<%=name%>List(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the list <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void set<%=name%>ListFlush(boolean flush, int interval) throws JGDIException {
        fairLock.lock();
        try {
           nativeSet<%=name%>ListFlush(flush, interval);
        } finally {
            fairLock.unlock();
        }
     }
     
     private native void nativeSet<%=name%>ListFlush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the list <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int get<%=name%>ListFlush() throws JGDIException {
        fairLock.lock();
        try {
           return nativeGet<%=name%>ListFlush();
        } finally {
            fairLock.unlock();
        }
     }
     
     private native int nativeGet<%=name%>ListFlush() throws JGDIException;
     
<%         
      } // end if hasGetListOperation
      if (cullObj.hasModifyEvent()) {
%>      
     /**
      *  Subscribe/Unsubscribe the modify <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribe<%=name%>Mod(boolean subscribe) throws JGDIException {
        fairLock.lock();
        try {
           nativeSubscribe<%=name%>Mod(subscribe);
        } finally {
            fairLock.unlock();
        }
     }
     
     private native void nativeSubscribe<%=name%>Mod(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void set<%=name%>ModFlush(boolean flush, int interval) throws JGDIException {
        fairLock.lock();
        try {
           nativeSet<%=name%>ModFlush(flush, interval);
        } finally {
            fairLock.unlock();
        }
     }

     private native void nativeSet<%=name%>ModFlush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the mod <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  get<%=name%>ModFlush() throws JGDIException {
        fairLock.lock();
        try {
           return nativeGet<%=name%>ModFlush();  
        } finally {
            fairLock.unlock();
        }
     }
     
     private native int  nativeGet<%=name%>ModFlush() throws JGDIException;
     
<% 
      } // end of hasModifyOperation
   } // end of for
   String [] specialEvents = {
       "QmasterGoesDown",
       "SchedulerRun",
       "Shutdown",
       "JobFinish",
       "JobUsage",
       "JobFinalUsage", 
       "JobPriorityMod",
       "QueueInstanceSuspend",
       "QueueInstanceUnsuspend"
   };
   
   for(int i = 0; i < specialEvents.length; i++) {

%>
     /**
      *  Subscribe/Unsubscribe the <%=specialEvents[i]%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribe<%=specialEvents[i]%>(boolean subscribe) throws JGDIException {
        fairLock.lock();
        try {
           nativeSubscribe<%=specialEvents[i]%>(subscribe);  
        } finally {
            fairLock.unlock();
        }
     }
   
     private native void nativeSubscribe<%=specialEvents[i]%>(boolean subscribe) throws JGDIException;
   
     /**
      *  Set the flush time for the <%=specialEvents[i]%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void set<%=specialEvents[i]%>Flush(boolean flush, int interval) throws JGDIException {
        fairLock.lock();
        try {
           nativeSet<%=specialEvents[i]%>Flush(flush, interval);  
        } finally {
            fairLock.unlock();
        }
     }
     
     private native void nativeSet<%=specialEvents[i]%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the <%=specialEvents[i]%>  event
      *
      * @return the flush time of the <%=specialEvents[i]%> event in seconds
      */
     public int  getMod<%=specialEvents[i]%>Flush() throws JGDIException {
        fairLock.lock();
        try {
           return nativeGet<%=specialEvents[i]%>Flush();  
        } finally {
            fairLock.unlock();
        }
     }
     
     private native int  nativeGet<%=specialEvents[i]%>Flush() throws JGDIException;
     
     
<%
   } // end of for special events
%>

}
