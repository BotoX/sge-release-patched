/**
 * Copyright 2003-2004 Sun Microsystems, Inc. All rights reserved.
 * Use is subject to license terms.
 * -----------------------------------------------------------------------------
 *  Generated from java_event_factory.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
%>
package com.sun.grid.jgdi.jni;


import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.JGDI;

/**
 *  EventClient implemention which uses native parts
 *
 *  </pre>
 *  @author  richard.hierlmeier@sun.com 
 *
 */
public class EventClientImpl extends AbstractEventClient implements com.sun.grid.jgdi.EventClient {

   /**
    *   Create a new event client
    *
    *   @param jgdi   gdi connection
    *   @param regId  event client registration id. If this id is 0 the event
    *                 client id will be dynamically assigned
    *   @throws JGDIException If the native intialization of the event client
    *                        fails.
    *                  
    */
   public EventClientImpl(JGDI jgdi, int regId) throws JGDIException {
      super(jgdi, regId);
   }

<%
    java.util.Iterator iter = cullDef.getObjectNames().iterator();
    com.sun.grid.cull.CullObject cullObj = null;
    String name = null;

    while( iter.hasNext() ) {
      name = (String)iter.next();
      cullObj = cullDef.getCullObject(name); 
      
      name = cullObj.getIdlName();
      
      if(name == null) {
         throw new IllegalStateException("Have no idl name for " + cullObj.getName());
      }
      
      if(cullObj.hasAddOperation()) {
%>
     /**
      *  Subscribe/Unsubscribe the add <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeAdd<%=name%>(boolean subscribe) throws JGDIException {
        synchronized(syncObject) {
           nativeSubscribeAdd<%=name%>(subscribe);
        }
     }
     
     private native void nativeSubscribeAdd<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the add <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setAdd<%=name%>Flush(boolean flush, int interval) throws JGDIException {
        synchronized(syncObject) {
           nativeSetAdd<%=name%>Flush(flush, interval);
        }
     }

     private native void nativeSetAdd<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the add <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int getAdd<%=name%>Flush() throws JGDIException {
        synchronized(syncObject) {
           return nativeGetAdd<%=name%>Flush();
        }
     }
     
     private native int nativeGetAdd<%=name%>Flush() throws JGDIException;
<%
      }
      
      if(cullObj.hasDeleteOperation()) { 
%>
     /**
      *  Subscribe/Unsubscribe the del <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeDel<%=name%>(boolean subscribe) throws JGDIException {
        synchronized(syncObject) {
           nativeSubscribeDel<%=name%>(subscribe);
        }
     }

     private native void nativeSubscribeDel<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setDel<%=name%>Flush(boolean flush, int interval) throws JGDIException {
        synchronized(syncObject) {
           nativeSetDel<%=name%>Flush(flush, interval);
        }
     }
     
     private native void nativeSetDel<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the del <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  getDel<%=name%>Flush() throws JGDIException {
        synchronized(syncObject) {
           return nativeGetDel<%=name%>Flush();
        }
     }
     
     private native int nativeGetDel<%=name%>Flush() throws JGDIException;
     
<%     
      }
      if (cullObj.hasGetListOperation()) {
%>         
     /**
      *  Subscribe/Unsubscribe the list <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeList<%=name%>(boolean subscribe) throws JGDIException {
        synchronized(syncObject) {
           nativeSubscribeList<%=name%>(subscribe);
        }
     }
     
     private native void nativeSubscribeList<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the list <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setList<%=name%>Flush(boolean flush, int interval) throws JGDIException {
        synchronized(syncObject) {
           nativeSetList<%=name%>Flush(flush, interval);
        }
     }
     
     private native void nativeSetList<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the list <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int getList<%=name%>Flush() throws JGDIException {
        synchronized(syncObject) {
           return nativeGetList<%=name%>Flush();
        }
     }
     
     private native int nativeGetList<%=name%>Flush() throws JGDIException;
     
<%         
      } // end if hasGetListOperation
      if (cullObj.hasModifyOperation()) {
%>      
     /**
      *  Subscribe/Unsubscribe the modify <%=name%> event
      *
      *  @param subscribe Subscribe/Unsubscribe flag
      *  @throws JGDIException if the subcribtion is failed
      */
     public void subscribeMod<%=name%>(boolean subscribe) throws JGDIException {
        synchronized(syncObject) {
           nativeSubscribeMod<%=name%>(subscribe);
        }
     }
     
     private native void nativeSubscribeMod<%=name%>(boolean subscribe) throws JGDIException;
     
     /**
      *  Set the flush time for the del <%=name%> event.
      *
      *  @param  flush     flush flag. (If <code>true</code> flushing is enabled and vice versa)
      *  @param  interval  flush interval in seconds
      *  @throws JGDIException on any error
      */
     public void setMod<%=name%>Flush(boolean flush, int interval) throws JGDIException {
        synchronized(syncObject) {
           nativeSetMod<%=name%>Flush(flush, interval);
        }
     }

     private native void nativeSetMod<%=name%>Flush(boolean flush, int interval) throws JGDIException;
     
     /**
      * Get the flush time of the mod <%=name%> event
      *
      * @return the flush time of the add <%=name%> event in seconds
      */
     public int  getMod<%=name%>Flush() throws JGDIException {
        synchronized(syncObject) {
           return nativeGetMod<%=name%>Flush();  
        }
     }
     
     private native int  nativeGetMod<%=name%>Flush() throws JGDIException;
     
<% 
      } // end of hasModifyOperation
   } // end of while 
%>

}
