/**
 * Copyright 2003-2004 Sun Microsystems, Inc. All rights reserved.
 * Use is subject to license terms.
 * -----------------------------------------------------------------------------
 *  Generated from java_event_factory.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
<%
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  
  
  class SubscribeMethodGenerator {
     
     private com.sun.grid.cull.CullObject cullObj;
     private String eventName;
     private String name;
     
     
     public void setObj(com.sun.grid.cull.CullObject cullObj) {
      
         this.cullObj = cullObj;
         name = cullObj.getIdlName();
         
         if(name == null) {
            throw new IllegalStateException("Have no idl name for " + cullObj.getName());
         }
      
         eventName = getEventName(cullObj);
     }

     public String getModEventName(com.sun.grid.cull.CullObject obj) {
        if(obj.getName().equals("SC_Type")) {
           return "sgeE_SCHED_CONF";
        }
        return "sgeE_" + getEventName(obj) + "_MOD";
     }
     
     public String getAddEventName(com.sun.grid.cull.CullObject obj) {
        return "sgeE_" + getEventName(obj) + "_ADD";
     }
     
     public String getDelEventName(com.sun.grid.cull.CullObject obj) {
        return "sgeE_" + getEventName(obj) + "_DEL";
     }

     public String getListEventName(com.sun.grid.cull.CullObject obj) {
        return "sgeE_" + getEventName(obj) + "_LIST";
     }
     
     private String getEventName(com.sun.grid.cull.CullObject obj) {
        
        String listname = obj.getListName();

        if(listname == null) {
           if(obj.getName().equals("JAT_Type")) {
               return "JATASK";
           } else if (obj.getName().equals("PET_Type")) {
               return "PETASK";
           } else {
               throw new IllegalArgumentException("cull object" + obj.getName() + " has no list");
           }
        }
        int si = listname.indexOf('_');
        int ei = listname.lastIndexOf('_');
      
        return listname.substring(si+1, ei);
     }
     
     public void generate() {
        if (this.cullObj.hasAddOperation()) {
           generate("Add" + name, getAddEventName(cullObj));
           generateFlush("Add" + name, getAddEventName(cullObj));
        }
        if (this.cullObj.hasDeleteOperation()) {
           generate("Del" + name, getDelEventName(cullObj));
           generateFlush("Del" + name, getDelEventName(cullObj));
        }
        if (this.cullObj.hasGetListOperation()) {
           generate("List" + name, getListEventName(cullObj));
           generateFlush("List" + name, getListEventName(cullObj));
        }
        if (this.cullObj.hasModifyOperation()) {
           generate("Mod" + name, getModEventName(cullObj));
           generateFlush("Mod" + name, getModEventName(cullObj));
        }
     }
     
     public void generate(String methodSuffix, String eventName) {
        
%>
JNIEXPORT void JNICALL Java_com_sun_grid_jgdi_jni_EventClientImpl_nativeSubscribe<%=methodSuffix%>(JNIEnv *env, jobject evcobj, jboolean subscribe)
{
   lList *alp = NULL;
   sge_evc_class_t *sge_evc = NULL;
   jgdi_result_t ret = JGDI_SUCCESS;

   DENTER(JGDI_LAYER, "Java_com_sun_grid_jgdi_jni_EventClientImpl_nativeSubscribe<%=methodSuffix%>");

   if ((ret = getEVC(env, evcobj, &sge_evc, &alp)) != JGDI_SUCCESS) {
      throw_error_from_answer_list(env, ret, alp);
      DEXIT;
      return;
   }

   if (subscribe == true) {
      DPRINTF(("event client (%d) subscribes <%=eventName%>\n", sge_evc->ec_get_id(sge_evc)));
      if (!sge_evc->ec_subscribe(sge_evc, <%=eventName%>)) {
         THROW_ERROR((env, JGDI_ERROR, "ec_subscribe %d failed", <%=eventName%>));
         DEXIT;
         return;
      }
   } else {
      DPRINTF(("event client (%d) unsubscribes <%=eventName%>\n", sge_evc->ec_get_id(sge_evc)));
      if (!sge_evc->ec_unsubscribe(sge_evc, <%=eventName%>)) {
         THROW_ERROR((env, JGDI_ERROR, "ec_unsubscribe %d failed", <%=eventName%>));
         DEXIT;
         return;
      }
   }
   DEXIT;
}
<%
        
     } // end of generate
     
     
     public void generateFlush(String method, String eventName) {
        
%>
JNIEXPORT void JNICALL Java_com_sun_grid_jgdi_jni_EventClientImpl_nativeSet<%=method%>Flush(JNIEnv *env, jobject evcobj, jboolean flush, jint interval) {
   
   lList *alp = NULL;
   sge_evc_class_t *sge_evc = NULL;
   jgdi_result_t ret = JGDI_SUCCESS;

   DENTER(JGDI_LAYER, "Java_com_sun_grid_jgdi_jni_EventClientImpl_nativeSet<%=method%>Flush");

   if ((ret = getEVC(env, evcobj, &sge_evc, &alp)) != JGDI_SUCCESS) {
      throw_error_from_answer_list(env, ret, alp);
      DEXIT;
      return;
   }

   if (!sge_evc->ec_set_flush(sge_evc, <%=eventName%>, (bool)flush, (u_long32)interval) ) {
      THROW_ERROR((env, JGDI_ERROR, "ec_set_flush failed"));
      DEXIT;
      return;
   }

   DEXIT;
}

JNIEXPORT jint JNICALL Java_com_sun_grid_jgdi_jni_AbstractEventClient_nativeGet<%=method%>Flush(JNIEnv *env, jobject evcobj) {
   
   lList *alp = NULL;
   sge_evc_class_t *sge_evc = NULL;
   jgdi_result_t ret = JGDI_SUCCESS;
   jint result = 0;
   DENTER(JGDI_LAYER, "Java_com_sun_grid_jgdi_jni_AbstractEventClient_nativeGet<%=method%>Flush");

   if ((ret = getEVC(env, evcobj, &sge_evc, &alp)) != JGDI_SUCCESS) {
      throw_error_from_answer_list(env, ret, alp);
      DEXIT;
      return 0;
   }

   result = (jint)sge_evc->ec_get_flush(sge_evc, <%=eventName%>);
   
   DEXIT;
   return result;
}

<%
        
     } // end of generate flush
     
     
  } // end of class SubscribeMethodGenerator
  
%>
#include <ctype.h>
#include <string.h>
#include "jni.h"
#include "jgdi.h"
#include "basis_types.h"
#include "cull.h"
#include "commlib.h"
#include "sgermon.h"
#include "sge_all_listsL.h"
#include "sge_answer.h"
#include "sge_prog.h"
#include "sge_bootstrap.h"
#include "sge_gdi.h"
#include "sge_gdi_ctx.h"
#include "sge_gdi2.h"
#include "cl_errors.h"
#include "setup.h"
#include "sge_log.h"
#include "sge_error_class.h"
#include "jgdi_common.h"
#include "sge_event_client2.h"
#include "jgdi_event.h"
#include "sge_mirror.h"
#include "sge_eventL.h"
#include "jgdi_wrapper.h"

<%
    java.util.Iterator iter = cullDef.getObjectNames().iterator();
    com.sun.grid.cull.CullObject cullObj = null;
    String name = null;
    
    SubscribeMethodGenerator gen = new SubscribeMethodGenerator();

    while( iter.hasNext() ) {
      name = (String)iter.next();
      cullObj = cullDef.getCullObject(name); 
      
      gen.setObj(cullObj);
      
      gen.generate();
      
   } // end of while 
    
   // special events
    
   String [][] specialEvents = {
       { "QmasterGoesDown", "sgeE_QMASTER_GOES_DOWN" },
       { "SchedulerRun",    "sgeE_SCHEDDMONITOR" },
       { "Shutdown",        "sgeE_SHUTDOWN" },
       { "JobFinish",       "sgeE_JOB_FINISH" },
       { "JobUsage",        "sgeE_JOB_USAGE" },
       { "JobFinalUsage",   "sgeE_JOB_FINAL_USAGE" }
   };
   
   for(int i = 0; i < specialEvents.length; i++) {
       gen.generate(specialEvents[i][0], specialEvents[i][1]);
       gen.generateFlush(specialEvents[i][0], specialEvents[i][1]);
   }
%>

jgdi_result_t process_generic_event(JNIEnv *env,  jobject *event, lListElem *ev, lList** alpp) {

   switch( lGetUlong(ev, ET_type)) {
<%
   class EvtInfo {
       
       private String classname;
       private String cullObjName;
       private String addEvent;
       private String modEvent;
       private String delEvent;
       private String listEvent;
               
       public EvtInfo(com.sun.grid.cull.CullObject cullObj, SubscribeMethodGenerator gen) {
           classname = jh.getFullClassName(cullObj).replace('.', '/');
           cullObjName = cullObj.getName();         
           if(cullObj.hasModifyOperation()) {
               modEvent = gen.getModEventName(cullObj);
           }
           if(cullObj.hasAddOperation()) {
               addEvent = gen.getAddEventName(cullObj);
           }
           if(cullObj.hasGetListOperation()) {
               addEvent = gen.getListEventName(cullObj);
           }
           if(cullObj.hasDeleteOperation()) {
               delEvent = gen.getDelEventName(cullObj);
           }
       }
       
       public EvtInfo(String classname, String cullObjName, String addEvent, String modEvent, String delEvent, String listEvent) {
           this.classname = classname;
           this.cullObjName = cullObjName;
           this.addEvent = addEvent;
           this.modEvent = modEvent;
           this.delEvent = delEvent;
           this.listEvent = listEvent;
       }
       
       public void generate() {
      if(modEvent != null) {
%>
      case <%=modEvent%>:
         return create_generic_event(env, event,"<%=classname%>", "<%=cullObjName%>", <%=cullObjName%>, SGE_EMA_MOD, ev, alpp);
<%
      }
      if(listEvent != null) {
%>      
      case <%=listEvent%>:
         return create_generic_event(env, event,"<%=classname%>", "<%=cullObjName%>", <%=cullObjName%>, SGE_EMA_LIST, ev, alpp);
<%
      }
      if(delEvent != null) {
%>      
      case <%=delEvent%>:
         return create_generic_event(env, event,"<%=classname%>", "<%=cullObjName%>", <%=cullObjName%>, SGE_EMA_DEL, ev, alpp);
<%
      }
      if(addEvent != null) {
%>      
      case <%=addEvent%>:
         return create_generic_event(env, event,"<%=classname%>", "<%=cullObjName%>", <%=cullObjName%>, SGE_EMA_ADD, ev, alpp);
<%
       }
       } // end of generate
   } // end of class EvtInfo
       
   java.util.List evtList = new java.util.LinkedList();
   
   iter = cullDef.getObjectNames().iterator();
    while( iter.hasNext() ) {
      name = (String)iter.next();
      cullObj = cullDef.getCullObject(name); 
      
      evtList.add(new EvtInfo(cullObj, gen));
   } // end of while      
   
   // generate the c code
   iter = evtList.iterator();
   while(iter.hasNext()) {
       ((EvtInfo)iter.next()).generate();
   }
   
%>  
      default:
         answer_list_add_sprintf(alpp, STATUS_EUNKNOWN, ANSWER_QUALITY_ERROR, 
                                 "Event action not yet handled %d",  lGetUlong(ev, ET_type));
         return JGDI_ERROR;
   }

}

